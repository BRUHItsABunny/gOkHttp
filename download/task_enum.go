// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.4
// Revision: 9793817a5b65af692253b8bc6081fe69a4b6985f
// Build Date: 2022-12-21T19:29:50Z
// Built By: goreleaser

package gokhttp_download

import (
	"errors"
	"fmt"
)

const (
	// DownloadTypeThreaded is a DownloadType of type Threaded.
	DownloadTypeThreaded DownloadType = iota
	// DownloadTypeLiveHLS is a DownloadType of type LiveHLS.
	DownloadTypeLiveHLS
)

var ErrInvalidDownloadType = errors.New("not a valid DownloadType")

const _DownloadTypeName = "ThreadedLiveHLS"

var _DownloadTypeMap = map[DownloadType]string{
	DownloadTypeThreaded: _DownloadTypeName[0:8],
	DownloadTypeLiveHLS:  _DownloadTypeName[8:15],
}

// String implements the Stringer interface.
func (x DownloadType) String() string {
	if str, ok := _DownloadTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DownloadType(%d)", x)
}

var _DownloadTypeValue = map[string]DownloadType{
	_DownloadTypeName[0:8]:  DownloadTypeThreaded,
	_DownloadTypeName[8:15]: DownloadTypeLiveHLS,
}

// ParseDownloadType attempts to convert a string to a DownloadType.
func ParseDownloadType(name string) (DownloadType, error) {
	if x, ok := _DownloadTypeValue[name]; ok {
		return x, nil
	}
	return DownloadType(0), fmt.Errorf("%s is %w", name, ErrInvalidDownloadType)
}

func (x DownloadType) Ptr() *DownloadType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x DownloadType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DownloadType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDownloadType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DownloadVersionV1 is a DownloadVersion of type V1.
	DownloadVersionV1 DownloadVersion = iota
)

var ErrInvalidDownloadVersion = errors.New("not a valid DownloadVersion")

const _DownloadVersionName = "v1"

var _DownloadVersionMap = map[DownloadVersion]string{
	DownloadVersionV1: _DownloadVersionName[0:2],
}

// String implements the Stringer interface.
func (x DownloadVersion) String() string {
	if str, ok := _DownloadVersionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DownloadVersion(%d)", x)
}

var _DownloadVersionValue = map[string]DownloadVersion{
	_DownloadVersionName[0:2]: DownloadVersionV1,
}

// ParseDownloadVersion attempts to convert a string to a DownloadVersion.
func ParseDownloadVersion(name string) (DownloadVersion, error) {
	if x, ok := _DownloadVersionValue[name]; ok {
		return x, nil
	}
	return DownloadVersion(0), fmt.Errorf("%s is %w", name, ErrInvalidDownloadVersion)
}

func (x DownloadVersion) Ptr() *DownloadVersion {
	return &x
}

// MarshalText implements the text marshaller method.
func (x DownloadVersion) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DownloadVersion) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDownloadVersion(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
