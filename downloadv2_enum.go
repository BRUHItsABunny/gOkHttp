// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package gokhttp

import (
	"fmt"
	"strings"
)

const (
	// TaskStatusInitializing is a TaskStatus of type Initializing.
	TaskStatusInitializing TaskStatus = iota
	// TaskStatusDownloading is a TaskStatus of type Downloading.
	TaskStatusDownloading
	// TaskStatusMerging is a TaskStatus of type Merging.
	TaskStatusMerging
	// TaskStatusDone is a TaskStatus of type Done.
	TaskStatusDone
	// TaskStatusError is a TaskStatus of type Error.
	TaskStatusError
)

const _TaskStatusName = "InitializingDownloadingMergingDoneError"

var _TaskStatusNames = []string{
	_TaskStatusName[0:12],
	_TaskStatusName[12:23],
	_TaskStatusName[23:30],
	_TaskStatusName[30:34],
	_TaskStatusName[34:39],
}

// TaskStatusNames returns a list of possible string values of TaskStatus.
func TaskStatusNames() []string {
	tmp := make([]string, len(_TaskStatusNames))
	copy(tmp, _TaskStatusNames)
	return tmp
}

var _TaskStatusMap = map[TaskStatus]string{
	TaskStatusInitializing: _TaskStatusName[0:12],
	TaskStatusDownloading:  _TaskStatusName[12:23],
	TaskStatusMerging:      _TaskStatusName[23:30],
	TaskStatusDone:         _TaskStatusName[30:34],
	TaskStatusError:        _TaskStatusName[34:39],
}

// String implements the Stringer interface.
func (x TaskStatus) String() string {
	if str, ok := _TaskStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TaskStatus(%d)", x)
}

var _TaskStatusValue = map[string]TaskStatus{
	_TaskStatusName[0:12]:                   TaskStatusInitializing,
	strings.ToLower(_TaskStatusName[0:12]):  TaskStatusInitializing,
	_TaskStatusName[12:23]:                  TaskStatusDownloading,
	strings.ToLower(_TaskStatusName[12:23]): TaskStatusDownloading,
	_TaskStatusName[23:30]:                  TaskStatusMerging,
	strings.ToLower(_TaskStatusName[23:30]): TaskStatusMerging,
	_TaskStatusName[30:34]:                  TaskStatusDone,
	strings.ToLower(_TaskStatusName[30:34]): TaskStatusDone,
	_TaskStatusName[34:39]:                  TaskStatusError,
	strings.ToLower(_TaskStatusName[34:39]): TaskStatusError,
}

// ParseTaskStatus attempts to convert a string to a TaskStatus
func ParseTaskStatus(name string) (TaskStatus, error) {
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TaskStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TaskStatus(0), fmt.Errorf("%s is not a valid TaskStatus, try [%s]", name, strings.Join(_TaskStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x TaskStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *TaskStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTaskStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *TaskStatus) Set(val string) error {
	v, err := ParseTaskStatus(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *TaskStatus) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *TaskStatus) Type() string {
	return "TaskStatus"
}
